// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:xftts_fluttify/src/ios/ios.export.g.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
extension TypeOpXfttsFluttifyIOS on Object {
  // type check
  Future<bool> is__<T>() async {
    final typeName = T.toString();
    if (RegExp(r'^(List<)?(String|int|double)(>)?|(Map<String,(String|int|double)>)$').hasMatch(typeName)) {
      return this is T;
    }
    else if (T == IFlyAudioSession) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfIFlyAudioSession', {'__this__': this});
      return result;
    }
    else if (T == IFlyDataUploader) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfIFlyDataUploader', {'__this__': this});
      return result;
    }
    else if (T == IFlyDebugLog) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfIFlyDebugLog', {'__this__': this});
      return result;
    }
    else if (T == IFlyISVRecognizer) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfIFlyISVRecognizer', {'__this__': this});
      return result;
    }
    else if (T == IFlyPcmRecorder) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfIFlyPcmRecorder', {'__this__': this});
      return result;
    }
    else if (T == IFlyRecognizerView) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfIFlyRecognizerView', {'__this__': this});
      return result;
    }
    else if (T == IFlyResourceUtil) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfIFlyResourceUtil', {'__this__': this});
      return result;
    }
    else if (T == IFlySetting) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfIFlySetting', {'__this__': this});
      return result;
    }
    else if (T == IFlySpeechConstant) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfIFlySpeechConstant', {'__this__': this});
      return result;
    }
    else if (T == IFlySpeechError) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfIFlySpeechError', {'__this__': this});
      return result;
    }
    else if (T == IFlySpeechEvaluator) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfIFlySpeechEvaluator', {'__this__': this});
      return result;
    }
    else if (T == IFlySpeechEvaluatorDelegate) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfIFlySpeechEvaluatorDelegate', {'__this__': this});
      return result;
    }
    else if (T == IFlySpeechRecognizer) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfIFlySpeechRecognizer', {'__this__': this});
      return result;
    }
    else if (T == IFlySpeechRecognizerDelegate) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfIFlySpeechRecognizerDelegate', {'__this__': this});
      return result;
    }
    else if (T == IFlySpeechSynthesizer) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfIFlySpeechSynthesizer', {'__this__': this});
      return result;
    }
    else if (T == IFlySpeechUtility) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfIFlySpeechUtility', {'__this__': this});
      return result;
    }
    else if (T == IFlyUserWords) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfIFlyUserWords', {'__this__': this});
      return result;
    }
    else if (T == IFlyVerifierUtil) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfIFlyVerifierUtil', {'__this__': this});
      return result;
    }
    else if (T == IFlyVoiceWakeuper) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfIFlyVoiceWakeuper', {'__this__': this});
      return result;
    }
    else if (T == CGRect) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfCGRect', {'__this__': this});
      return result;
    }
    else if (T == CGPoint) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfCGPoint', {'__this__': this});
      return result;
    }
    else if (T == CGSize) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfCGSize', {'__this__': this});
      return result;
    }
    else if (T == UIEdgeInsets) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfUIEdgeInsets', {'__this__': this});
      return result;
    }
    else if (T == NSError) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfNSError', {'__this__': this});
      return result;
    }
    else if (T == UIView) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfUIView', {'__this__': this});
      return result;
    }
    else if (T == UIViewController) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfUIViewController', {'__this__': this});
      return result;
    }
    else if (T == UIControl) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfUIControl', {'__this__': this});
      return result;
    }
    else if (T == UIImage) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfUIImage', {'__this__': this});
      return result;
    }
    else if (T == UIColor) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfUIColor', {'__this__': this});
      return result;
    }
    else if (T == NSData) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfNSData', {'__this__': this});
      return result;
    }
    else if (T == NSOperation) {
      final result = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('RefClass::isKindOfNSOperation', {'__this__': this});
      return result;
    }
  }

  // type cast
  T as__<T>() {
    final typeName = T.toString();
    // jsonable 直接造型 返回
    if (RegExp(r'^(List<)?(String|int|double)(>)?|(Map<String,(String|int|double)>)$').hasMatch(typeName)) {
      return this as T;
    }
    // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
    else if (T == IFlyAudioSession) {
      return (IFlyAudioSession()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == IFlyDataUploader) {
      return (IFlyDataUploader()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == IFlyDebugLog) {
      return (IFlyDebugLog()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == IFlyISVRecognizer) {
      return (IFlyISVRecognizer()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == IFlyPcmRecorder) {
      return (IFlyPcmRecorder()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == IFlyRecognizerView) {
      return (IFlyRecognizerView()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == IFlyResourceUtil) {
      return (IFlyResourceUtil()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == IFlySetting) {
      return (IFlySetting()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == IFlySpeechConstant) {
      return (IFlySpeechConstant()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == IFlySpeechError) {
      return (IFlySpeechError()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == IFlySpeechEvaluator) {
      return (IFlySpeechEvaluator()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == IFlySpeechEvaluatorDelegate) {
      return (IFlySpeechEvaluatorDelegate.subInstance()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == IFlySpeechRecognizer) {
      return (IFlySpeechRecognizer()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == IFlySpeechRecognizerDelegate) {
      return (IFlySpeechRecognizerDelegate.subInstance()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == IFlySpeechSynthesizer) {
      return (IFlySpeechSynthesizer()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == IFlySpeechUtility) {
      return (IFlySpeechUtility()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == IFlyUserWords) {
      return (IFlyUserWords()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == IFlyVerifierUtil) {
      return (IFlyVerifierUtil()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == IFlyVoiceWakeuper) {
      return (IFlyVoiceWakeuper()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == CGRect) {
      return (CGRect()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == CGPoint) {
      return (CGPoint()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == CGSize) {
      return (CGSize()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == UIEdgeInsets) {
      return (UIEdgeInsets()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == NSError) {
      return (NSError()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == UIView) {
      return (UIView()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == UIViewController) {
      return (UIViewController()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == UIControl) {
      return (UIControl()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == UIImage) {
      return (UIImage()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == UIColor) {
      return (UIColor()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == NSData) {
      return (NSData()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
    else if (T == NSOperation) {
      return (NSOperation()..refId = (this is Ref ? (this as Ref).refId : this as String)..tag__ = 'xftts_fluttify') as T;
    }
  }
}