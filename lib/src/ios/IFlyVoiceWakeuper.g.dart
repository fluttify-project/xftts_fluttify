// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:xftts_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class IFlyVoiceWakeuper extends NSObject  {
  //region constants
  static const String name__ = 'IFlyVoiceWakeuper';

  
  //endregion

  //region creators
  static Future<IFlyVoiceWakeuper> create__({ bool init = true /* ios only */ }) async {
    final refId = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('ObjectFactory::createIFlyVoiceWakeuper', {'init': init});
    final object = IFlyVoiceWakeuper()..refId = refId..tag__ = 'xftts_fluttify';
    return object;
  }
  
  static Future<List<IFlyVoiceWakeuper>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('ObjectFactory::create_batchIFlyVoiceWakeuper', {'length': length, 'init': init});
  
    final List<IFlyVoiceWakeuper> typedResult = resultBatch.map((result) => IFlyVoiceWakeuper()..refId = result..tag__ = 'xftts_fluttify').toList();
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<bool> get_isListening() async {
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod("IFlyVoiceWakeuper::get_isListening", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  //endregion

  //region setters
  Future<void> set_delegate(IFlyVoiceWakeuperDelegate delegate) async {
    await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('IFlyVoiceWakeuper::set_delegate', <String, dynamic>{'__this__': this, });
  
    MethodChannel('IFlyVoiceWakeuperDelegate::Callback', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify')))
      .setMethodCallHandler((methodCall) async {
        try {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::IFlyVoiceWakeuperDelegate::onBeginOfSpeech':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onBeginOfSpeech([])');
              }
          
              // handle the native call
              delegate?.onBeginOfSpeech();
              break;
            case 'Callback::IFlyVoiceWakeuperDelegate::onEndOfSpeech':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onEndOfSpeech([])');
              }
          
              // handle the native call
              delegate?.onEndOfSpeech();
              break;
            case 'Callback::IFlyVoiceWakeuperDelegate::onCompleted':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onCompleted([\'error\':${args['error']}])');
              }
          
              // handle the native call
              delegate?.onCompleted(TypeOpXfttsFluttifyIOS((args['error'] as Object))?.as__<IFlySpeechError>());
              break;
            case 'Callback::IFlyVoiceWakeuperDelegate::onResult':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onResult([\'resultDic\':${args['resultDic']}])');
              }
          
              // handle the native call
              delegate?.onResult(args['resultDic']);
              break;
            case 'Callback::IFlyVoiceWakeuperDelegate::onVolumeChanged':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onVolumeChanged([\'volume\':${args['volume']}])');
              }
          
              // handle the native call
              delegate?.onVolumeChanged(args['volume']);
              break;
            case 'Callback::IFlyVoiceWakeuperDelegate::onEvent_isLast_arg1_data':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onEvent_isLast_arg1_data([\'eventType\':${args['eventType']}, \'isLast\':${args['isLast']}, \'arg1\':${args['arg1']}, \'eventData\':${args['eventData']}])');
              }
          
              // handle the native call
              delegate?.onEvent_isLast_arg1_data(args['eventType'], args['isLast'], args['arg1'], args['eventData']);
              break;
            default:
              break;
          }
        } catch (e) {
          debugPrint(e);
          throw e;
        }
      });
  }
  
  //endregion

  //region methods
  
  static Future<IFlyVoiceWakeuper> sharedInstance() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: IFlyVoiceWakeuper::sharedInstance([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('IFlyVoiceWakeuper::sharedInstance', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = IFlyVoiceWakeuper()..refId = __result__..tag__ = 'xftts_fluttify';
      return __return__;
    }
  }
  
  
  Future<bool> startListening() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: IFlyVoiceWakeuper@$refId::startListening([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('IFlyVoiceWakeuper::startListening', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<bool> stopListening() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: IFlyVoiceWakeuper@$refId::stopListening([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('IFlyVoiceWakeuper::stopListening', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<bool> cancel() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: IFlyVoiceWakeuper@$refId::cancel([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('IFlyVoiceWakeuper::cancel', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<String> getParameter(String key) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: IFlyVoiceWakeuper@$refId::getParameter([\'key\':$key])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('IFlyVoiceWakeuper::getParameter', {"key": key, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<bool> setParameter_forKey(String value, String key) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: IFlyVoiceWakeuper@$refId::setParameter([\'value\':$value, \'key\':$key])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('IFlyVoiceWakeuper::setParameter_forKey', {"value": value, "key": key, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<bool> writeAudio(NSData audioData) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: IFlyVoiceWakeuper@$refId::writeAudio([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('IFlyVoiceWakeuper::writeAudio', {"audioData": audioData, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  //endregion
}

extension IFlyVoiceWakeuper_Batch on List<IFlyVoiceWakeuper> {
  //region getters
  Future<List<bool>> get_isListening_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod("IFlyVoiceWakeuper::get_isListening_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<IFlyVoiceWakeuper>> sharedInstance_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('IFlyVoiceWakeuper::sharedInstance_batch', );
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => IFlyVoiceWakeuper()..refId = __result__..tag__ = 'xftts_fluttify').toList();
      return typedResult;
    }
  }
  
  
  Future<List<bool>> startListening_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('IFlyVoiceWakeuper::startListening_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<bool>> stopListening_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('IFlyVoiceWakeuper::stopListening_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<bool>> cancel_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('IFlyVoiceWakeuper::cancel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<String>> getParameter_batch(List<String> key) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('IFlyVoiceWakeuper::getParameter_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"key": key[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<bool>> setParameter_forKey_batch(List<String> value, List<String> key) async {
    if (value.length != key.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('IFlyVoiceWakeuper::setParameter_forKey_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"value": value[__i__], "key": key[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<bool>> writeAudio_batch(List<NSData> audioData) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('IFlyVoiceWakeuper::writeAudio_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"audioData": audioData[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  //endregion
}