// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:xftts_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class IFlyDataUploader extends NSObject  {
  //region constants
  static const String name__ = 'IFlyDataUploader';

  
  //endregion

  //region creators
  static Future<IFlyDataUploader> create__({ bool init = true /* ios only */ }) async {
    final refId = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('ObjectFactory::createIFlyDataUploader', {'init': init});
    final object = IFlyDataUploader()..refId = refId..tag__ = 'xftts_fluttify';
    return object;
  }
  
  static Future<List<IFlyDataUploader>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('ObjectFactory::create_batchIFlyDataUploader', {'length': length, 'init': init});
  
    final List<IFlyDataUploader> typedResult = resultBatch.map((result) => IFlyDataUploader()..refId = result..tag__ = 'xftts_fluttify').toList();
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<String> get_dataName() async {
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod("IFlyDataUploader::get_dataName", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<String> get_data() async {
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod("IFlyDataUploader::get_data", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  //endregion

  //region setters
  Future<void> set_dataName(String dataName) async {
    await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('IFlyDataUploader::set_dataName', <String, dynamic>{'__this__': this, "dataName": dataName});
  
  
  }
  
  Future<void> set_data(String data) async {
    await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('IFlyDataUploader::set_data', <String, dynamic>{'__this__': this, "data": data});
  
  
  }
  
  //endregion

  //region methods
  
  Future<void> uploadDataWithCompletionHandler_name_data(void completionHandler(String result, IFlySpeechError error), String name, String data) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: IFlyDataUploader@$refId::uploadDataWithCompletionHandler([\'name\':$name, \'data\':$data])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('IFlyDataUploader::uploadDataWithCompletionHandler_name_data', {"name": name, "data": data, "__this__": this});
  
  
    // handle native call
    MethodChannel('IFlyUploadDataCompletionHandler::Callback@$refId', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify')))
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::IFlyUploadDataCompletionHandler::IFlyUploadDataCompletionHandler':
                // print log
                if (fluttifyLogEnabled) {
          
                }
          
                // handle the native call
                if (completionHandler != null) completionHandler(args['result'], TypeOpXfttsFluttifyIOS((args['error'] as Object))?.as__<IFlySpeechError>());
                break;
              default:
                break;
            }
          } catch (e) {
            debugPrint(e);
            throw e;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<void> setParameter_forKey(String parameter, String key) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: IFlyDataUploader@$refId::setParameter([\'parameter\':$parameter, \'key\':$key])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('IFlyDataUploader::setParameter_forKey', {"parameter": parameter, "key": key, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  //endregion
}

extension IFlyDataUploader_Batch on List<IFlyDataUploader> {
  //region getters
  Future<List<String>> get_dataName_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod("IFlyDataUploader::get_dataName_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<String>> get_data_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod("IFlyDataUploader::get_data_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_dataName_batch(List<String> dataName) async {
    await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('IFlyDataUploader::set_dataName_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "dataName": dataName[__i__]}]);
  
  
  }
  
  Future<void> set_data_batch(List<String> data) async {
    await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('IFlyDataUploader::set_data_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "data": data[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  Future<List<void>> setParameter_forKey_batch(List<String> parameter, List<String> key) async {
    if (parameter.length != key.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('IFlyDataUploader::setParameter_forKey_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"parameter": parameter[__i__], "key": key[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  //endregion
}