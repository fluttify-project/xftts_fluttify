// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:xftts_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class com_iflytek_cloud_util_ResourceUtil extends java_lang_Object  {
  //region constants
  static const String name__ = 'com.iflytek.cloud.util.ResourceUtil';

  static final String ENGINE_START = "engine_start";
  static final String ENGINE_DESTROY = "engine_destroy";
  static final String ASR_RES_PATH = "asr_res_path";
  static final String GRM_BUILD_PATH = "grm_build_path";
  static final String TTS_RES_PATH = "tts_res_path";
  static final String IVW_RES_PATH = "ivw_res_path";
  //endregion

  //region creators
  static Future<com_iflytek_cloud_util_ResourceUtil> create__() async {
    final refId = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('ObjectFactory::createcom_iflytek_cloud_util_ResourceUtil__', );
    final object = com_iflytek_cloud_util_ResourceUtil()..refId = refId..tag__ = 'xftts_fluttify';
    return object;
  }
  
  static Future<List<com_iflytek_cloud_util_ResourceUtil>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('ObjectFactory::create_batchcom_iflytek_cloud_util_ResourceUtil__', {'length': length});
  
    final List<com_iflytek_cloud_util_ResourceUtil> typedResult = resultBatch.map((result) => com_iflytek_cloud_util_ResourceUtil()..refId = result..tag__ = 'xftts_fluttify').toList();
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<String> generateResourcePath(android_content_Context var0, com_iflytek_cloud_util_ResourceUtil_RESOURCE_TYPE var1, String var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.iflytek.cloud.util.ResourceUtil::generateResourcePath([\'var2\':$var2])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('com.iflytek.cloud.util.ResourceUtil::generateResourcePath', {"var0": var0, "var1": var1.toValue(), "var2": var2});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  //endregion
}

extension com_iflytek_cloud_util_ResourceUtil_Batch on List<com_iflytek_cloud_util_ResourceUtil> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<String>> generateResourcePath_batch(List<android_content_Context> var0, List<com_iflytek_cloud_util_ResourceUtil_RESOURCE_TYPE> var1, List<String> var2) async {
    if (var0.length != var1.length || var1.length != var2.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/xftts_fluttify', StandardMethodCodec(FluttifyMessageCodec('xftts_fluttify'))).invokeMethod('com.iflytek.cloud.util.ResourceUtil::generateResourcePath_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__].toValue(), "var2": var2[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  //endregion
}